use std::str::FromStr;

grammar;

match {
    // The default whitespace skipping is disabled an `ignore pattern` is specified
    r"\s*" => { }, 
    // Skip `// comments`
    r"//[^\n\r]*" => { }, 
    // Skip `/* comments */`
    r"/\*([^\*]*\*+[^\*/])*([^\*]*\*+|[^\*])*\*/" => { },  
    _
}

pub NumOrId = {
    Num => <>.to_string(),
    Id,
}

pub Num: usize = {
    r"[0-9]+" => usize::from_str(<>).unwrap(),
};

pub Id: String = {
    r"([a-z]|[A-Z])([a-z]|[A-Z]|[0-9]|_)*" => String::from_str(<>).unwrap(),
};

// lets try to break down the multi-line comment
//  
//  should allow patterns like
//  /*
//  ...
//  */
//  and
//  /* /*
//  */
//  */
//  but reject patterns like
//  /* /*
//  */
//  and
//  /* */ */
//  
//  Rather tricky right...
//  
//  /\*([^\*]*\*+[^\*/])*([^\*]*\*+|[^\*])*\*/
//  the outer  "/\* ... \*/" requires start and end "/*" ... "*/"
//  so let's look closer at "([^\*]*\*+[^\*/])*([^\*]*\*+|[^\*])*"
//  the trailing "*", just means any number of 
//  "[^\*]*\*+[^\*/])*([^\*]*\*+|[^\*]"
//
//  "[^\*]*\*+[^\*/])*"
//  "[^\*]*"" any number or Not("*"), e.g. 0123
//  "\*" one or many "*", e.g. *, or ****
//  .... ehhh I gave up, regexp is haaaaaaarrrrrrrd, another day perhaps